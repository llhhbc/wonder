
go src

## 启动过程

* 初始化参数
	设置argc，argv
* 初始化系统
	设置maxproc
* 初始化调度器
	* 初始化栈分配器stack
	* 初始化内存分配器malloc
	* 公共初始化

	* 处理命令行参数、环境变量：gorags，goenvs

	* 垃圾回收初始化gcinit

* runtime.main
	* 初始化runtime包中的所有init函数
	* 启动垃圾回收
	* 执行所有用户名中的init
	* 进入main.main，用户逻辑入口

## 内存分配

* go内存空间结构
	* 页所属 spans 512MB | gc标记位图 bitmap 32GB | 用户内存分配 arena 512GB  （后面的空间为可能的最大空间）

* 分配器将内存为两种：span内存块，object内存对象
* 使用tcmalloc来管理内存
	* cache 每个线程都会绑定一个cache，用于无锁object分配
	* central 为所有cache提供切分好的后备span
	* heap 管理闲置的span，需要时向系统申请新内存

	* 优先使用cache来分配对象，如果不足，再从central中优先找现有的span检查是否有可用空间，再不足，才到heap中申请span

* 内存分配
	* golang编译器支持逃逸分析(escape analysis)，编译期通过构建调用图来分析局部变量是否会被外部引用，从而决定是否可直接分配在栈上
	* 编译参数 -gcflags "-m" 可输出编译优化信息

* 内存回收
	* 以span为单元，检查span内的object是否全部释放，将原本就为空的span转移到central.nonempty，将收回的span交还给heap。同时会尝试合并相邻的空的span

* 内存释放
	* 程序运行会启动一个监控任务：sysmon，每隔一段时间就会检查heap内闲置内存，如果闲置时间超过阈值，则释放其关联的物理内存（只是建议系统回收，但不代表系统就一定会回收）

## 垃圾回收

	* 三色标记和写屏障
		* 起初所有对象都是白色
		* 扫描所有可达对象，标记为灰色，放入待处理队列
		* 从队列中提取灰色对象，将其引用的对象标记为灰色放入队列，自身标记为黑色
		* 写屏障监视对象内存修改，重新标色或放回队列
		* 全部扫描和标记后，剩下白色就是待回收对象、黑色就是活跃对象

	* 控制器
		* 并发回收任务中，记录相关状态数据，动态调整运行策略，参与next_gc回收阈值设置，调整垃圾回收触发频率

	* 回收模式
		* gcstoptheworld == 1 : gcForceMode 强制模式
		* gcstoptheworld == 2 : gcForceBlockMode 强制块模式
		* gcBackgroundMode 并发模式，只有这个是后台异步模式。当满足gc条件时，会唤醒，gc后会休眠
			* 后台模式步骤： STW(stopTheWorld), WB(writeBarrierEnabled), BE(blackenEnabled)
			* WB:1,BE:1, 并发扫描，标志灰色，对白色对象的引用修改被写屏障捕获
			* 第二轮标记
			* BE = 0，stw冻结，完成最终标记
			* wb = 0，并发清理

	* 标记
		* 标记的工作模式
			* gcMarkWorkerDedicatedMode 全力运行，直到并发标记任务结束
			* gcMarkWorkerFractionalMode 可被抢占和调试
			* gcMarkWorkerIdleMode 仅在空闲时参与标记任务

	* 监控
		* 监控服务sysmon每隔2分钟就会检查一次垃圾回收状态，如果超过2分钟未触发，就强制执行

	* 内存状态统计
		* GODEBUG="gctrace=1"  可输出垃圾回收信息

## 并发调度
	* goroutine 对应的用户态线程，而不是系统线程，调度是由golang自己来调度的
	* golang采用的是一种多对多的方案，m个用户线程对应n个系统线程
	* golang有3个角色：
		* M：代表系统线程，由操作系统管理
		* G：goroutine的实体，包括的调用栈，重要的调度信息
		* P：衔接M和G的调度上下文，由GOMAXPROCS决定，一般和核心数对应。每个P会将goroutine从一个就绪的队列中做pop操作，为了减小锁的竞争，通常情况下每个P会负责一个队列

	* goroutine创建好后，会把对应的G放到P的本地队列中。如果本地队列已满，一次性转移半数到全局队列中。当本地队列和全局队列都为空，才会考虑去检查其它P任务队列
	* M对应一个特殊的g0，当执行g时，会把栈复制到g0中，避免一个g被多个m执行时的冲突
	* P为M提供cache，以便为执行者提供对象内存分配
	* GODEBUG="schedtrace=1000"  可查看sched信息

## 监控
	* 释放闲置超过5分钟的span物理内存
	* 如果超过2分钟没有垃圾回收，强制执行
	* 将长时间未处理的netpoll结果添加到任务队列
	* 向长时间运行的g任务发出抢占调度
	* 收回因syscall长时间阻塞的p

##　缓存池
	每个P都有一个私有缓存池，还有共享缓存池。优先使用私有缓存池，共享缓存池需要加锁访问，如果还没有，可从其它P中取共享缓存池，实在找不到，则自己新建一个缓存池
