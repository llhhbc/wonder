<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wonder of light</title>
    <link>https://llhhbc.github.io/wonder/</link>
    <description>Recent content on wonder of light</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 16 May 2018 19:02:28 +0800</lastBuildDate>
    
	<atom:link href="https://llhhbc.github.io/wonder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记忆基数</title>
      <link>https://llhhbc.github.io/wonder/post/selfupd/memorybase/</link>
      <pubDate>Wed, 16 May 2018 19:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/selfupd/memorybase/</guid>
      <description> 记忆基数  1 粉笔 2 鸭子 3 耳朵 4 红旗 5 秤钩 6 口哨 7 锄头 8 葫芦 9 气球 10 老师 11 双截棍 12 不倒翁 13  </description>
    </item>
    
    <item>
      <title>python 简单使用</title>
      <link>https://llhhbc.github.io/wonder/post/language/python/pythi/</link>
      <pubDate>Fri, 11 May 2018 20:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/language/python/pythi/</guid>
      <description>ipynb
jupyter notebook  </description>
    </item>
    
    <item>
      <title>tensorFlow入门</title>
      <link>https://llhhbc.github.io/wonder/post/tensorflow/learn_tensor/</link>
      <pubDate>Fri, 11 May 2018 20:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/tensorflow/learn_tensor/</guid>
      <description> 环境搭建 pyenv搭建 1.安装pyenv 1.安装pip virtualenv 1.创建虚拟环境 python3 -m venv ./env 1.切换环境 . env/bin/activate
conda搭建 1.安装anaconda3 1.创建虚拟环境 conda create --name py3 python=3 1.环境切换 source activate py3
tensorflow安装(下面操作都在python3环境下操作) ##我本地环境如下搭建 # conda create --name mytensor python=3.6 # source activate mytensor # source deactivate #退出环境 pip install tensorflow pip install tensorlayer  验证环境安装 import tensorflow as tf hello = tf.constant(&amp;quot;hello, tensorflow&amp;quot;) sess = tf.Session() print(sess.run(hello))  简单入门  参考资料 中文社区     类型 描述 说明     session 会话 一次流程执行的会话，包含上下文信息   graph 描述计算过程 在session中启动，图形显示   tensor 数据 数据类型   op 操作 数据之间的操作   variable 变量 数据类型，运行中可改变，用于维护状态   feed 赋值 为op的tensor赋值   fetch 取值 从op的tensor中取值   constant 常量     </description>
    </item>
    
    <item>
      <title>学习汇总</title>
      <link>https://llhhbc.github.io/wonder/post/allmywonder/</link>
      <pubDate>Thu, 10 May 2018 20:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/allmywonder/</guid>
      <description> 学习汇总 语言学习  go c php python java  go  kubernetes etcd istio tensorflow hugo grafana influxdb consul prometheus appdash nomad hystrix &amp;ndash; gin
 kit
 hydra
  php  laravel  python  tensorflow pytorch deepmind lab  js  nodejs codecombat  想做的事  读懂v8，用go来实现 使用tensorflow，完成智能识别 训练记忆力 es做为存储，d3来展示，完成思维图的整理与知识分析 使用kuber完成思维系统的搭建  </description>
    </item>
    
    <item>
      <title>es 入门</title>
      <link>https://llhhbc.github.io/wonder/post/es/esstart/</link>
      <pubDate>Fri, 27 Apr 2018 09:01:00 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/es/esstart/</guid>
      <description> es安装  官网下载 es https://www.elastic.co/downloads/elasticsearch ```shell unzip elasticsearch-6.2.4.zip cd elasticsearch-6.2.4/config  #修改集群名字和端口,数据目录等 vi elasticsearch.yml
启动es cd elasticsearch-6.2.4/bin ./elasticsearch
验证启动状态 curl http://127.0.0.1:9200
### 安装中文分词 &amp;gt; 参考 https://github.com/medcl/elasticsearch-analysis-ik &amp;gt; ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip ### es简单使用 #### 创建一个index mapping（相当于一个表） ```shell curl -XPUT &#39;localhost:9200/wonderbook?pretty&#39; -H &#39;Content-type:application/json&#39; -d &#39; { &amp;quot;mappings&amp;quot;: { &amp;quot;articles&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;title&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;}, &amp;quot;description&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;}, &amp;quot;tags&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;}, &amp;quot;date&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;date&amp;quot;}, &amp;quot;categories&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;}, &amp;quot;context&amp;quot;: {&amp;quot;type&amp;quot; : &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;} } } } } &#39;  </description>
    </item>
    
    <item>
      <title>kbuernetes 学习</title>
      <link>https://llhhbc.github.io/wonder/post/kuber/learn_kuber/</link>
      <pubDate>Fri, 27 Apr 2018 09:01:00 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/kuber/learn_kuber/</guid>
      <description>Kubernetes基本概念 Pod Pod是一组容器集合，他们共享IPC、Network 和 UTC namespace 例：
apiVersion: v1 kind: Pod metadata: name: nginx labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80  Node 运行pod的主机
Namespace 管理一组资源和对象
Service 应用服务的抽象，通过labels为应用提供负载均衡和服务发现。匹配labels为Pod IP和端口列表组成endpoints，由kube-proxy负责将服务IP负载均衡到这些endpoints上。 每个Service都会自动分配一个culster IP（仅在集群内部可访问的虚拟地址）和DNS名，其它容器可以通过该地址或DNS来访问服务
apiVersion: v1 kind: Service metadata: name: nginx spec: ports: - port: 8078 name: http targetPort: 80 protocol: TCP selector: app: nginx  Label 是识别Kurbernetes对象的标签，以key/value的方式附加到对象上。Label不提供唯一性，经常是很多对象（如Pods）都使用相同的label来标志具体的应用（如负载均衡时结点为的选择） label选择支持如下模式： * 等式： app=nginx 或 env!= production * 集合: env in (production, qa) * 多个label（他们之间是AND的关系）： app=nginx,env=test</description>
    </item>
    
    <item>
      <title>istio初尝试</title>
      <link>https://llhhbc.github.io/wonder/post/kuber/istio/</link>
      <pubDate>Thu, 26 Apr 2018 20:46:49 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/kuber/istio/</guid>
      <description>说明  参考 http://istio.doczh.cn/
 安装istio  kubectl apply -f install/kubernetes/istio.yaml #如果出现 unable to recognize &amp;ldquo;install/kubernetes/istio.yaml&amp;rdquo; 的错误，删除后再重新执行一遍就好了
 部署bookinfo kubectl apply -f &amp;lt;(istioctl kube-inject -f bookinfo.yaml) #获取访问地址 export GATEWAY_URL=$(kubectl get po -l istio=ingress -n istio-system -o &#39;jsonpath={.items[0].status.hostIP}&#39;):$(kubectl get svc istio-ingress -n istio-system -o &#39;jsonpath={.spec.ports[0].nodePort}&#39;) #测试地址访问 curl -o /dev/null -s -w &amp;quot;%{http_code}\n&amp;quot; http://${GATEWAY_URL}/productpage  1.1 验证路由访问 #所有用户都访问v1 istioctl create -f route-rule-all-v1.yaml #jason用户登录访问v2 istioctl create -f route-rule-reviews-test-v2.yaml  1.2 记录日志 ##保存如下信息为 new_telemetry.</description>
    </item>
    
    <item>
      <title>kuber手工搭建</title>
      <link>https://llhhbc.github.io/wonder/post/kuber/kuber_onebyone/</link>
      <pubDate>Thu, 26 Apr 2018 20:46:49 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/kuber/kuber_onebyone/</guid>
      <description>准备工作 关闭selunix 关闭swap 作为node的结点，要安装docker（包括master和node共用的）
 设置主机名 &amp;gt; sh etc/set_hosts.sh
 安装etcd &amp;gt; sh rpms/install_etcd.sh
 安装etcd证书 &amp;gt; sh keys/etcd/install_etc_key.sh
 修改etcd配置 &amp;gt; sh etc/set_etcd.sh
 启动etcd &amp;gt; sh run/start_etcd.sh
 安装kube 程序 &amp;gt; sh rpms/install_kuber.sh
 安装kuber证书 &amp;gt; sh keys/k8s/install_k8s_key.sh
 修改kuber配置 &amp;gt; #设置master结点 &amp;gt; sh etc/kube_cfg/set_kuber_cfg.sh &amp;gt; #设置node结点 &amp;gt; sh etc/kube_cfg/set_kuber_node_cfg.sh &amp;gt; #如果master也作为node结点，则运行 &amp;gt; sh etc/kube_cfg/set_kuber_master_node_cfg.sh
 启动kube &amp;gt; sh run/start_kube.sh &amp;gt; #在任意一台master上执行： 开启认证 &amp;gt; kubectl create clusterrolebinding kubelet-bootstrap &amp;ndash;clusterrole=system:node-bootstrapper &amp;ndash;user=kubelet-bootstrap &amp;gt; #如果master上要启动作为node，则 &amp;gt; sh run/start_kube_master_node.</description>
    </item>
    
    <item>
      <title>kuberadm start</title>
      <link>https://llhhbc.github.io/wonder/post/kuber/kubeadm_start/</link>
      <pubDate>Thu, 26 Apr 2018 10:46:49 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/kuber/kubeadm_start/</guid>
      <description>kubernetes搭建比较复杂，所以选择先用kubeadm全自动来先试试手（奈何墙有点高，所以加了些插曲）
通过kubeadm安装 参考 官方文档
1. 准备环境 1.1 修改hostname  修改 /etc/hostname  1.2 关闭sellinux，关闭防火墙  setenforce 0 编辑/etc/selinux/config
 firewall-cmd &amp;ndash;state 查看状态
 systemctl stop firewalld.service # 停止firewall
 systemctl disable firewalld.service # 禁止firewall开机启动
  1.3 关闭swap swapoff -a 编辑 /etc/fstab 去掉swap配置（#号注释掉）  1.4 安装crictl (可选) go get github.com/kubernetes-incubator/cri-tools/cmd/crictl GOARCH=amd64 GOOS=linux go build  1.5 get docker image  运行kubeadm init 当提示请稍等后，检查/etc/kubernetes/manifests 目录下的yaml文件，里面会有需要的镜像和版本 通过hub.docker.com 中转，实现镜像的下载 具体方法请参考：kubeadm搭建（by mritd） 重新tag镜像(以下是我使用的，可直接pull后使用)</description>
    </item>
    
    <item>
      <title>kube问题汇总</title>
      <link>https://llhhbc.github.io/wonder/post/kuber/kube_help/</link>
      <pubDate>Thu, 26 Apr 2018 10:46:49 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/kuber/kube_help/</guid>
      <description> 虚拟机建议用virutalbox
当时istio的bookinfo无法部署： reviews-v2-7bdf9b96b6-khg7s 老是会报错，提示无法创建目录，没权限，后来查是虚拟机sandbox版本太低，导致的一个bug，文件无法删除也无法修改
 virtualbox建议用nat 网络的方式，自己添加一个网卡，作为虚拟机集群的网络
然后每个主机在加一个hostonly的网卡，用于主机访问虚拟机
 硬盘没空间：
突然发现pod状态变成了：Evicted，还有挂起的，然后 通过 kubelet describe命令查看，发现是node空间满了，无法部署了：我看空间用了80%
 时间不同步：
时间不同步时，会出现 Unable to authenticate the request due to an error: x509: certificate has expired or is not yet valid 我同步机器时间后，问题解决。。。
 token不一致：
配置文件bootstrap.kubeconfig中token不一致，会导致这个错 failed to run Kubelet: cannot create certificate signing request: Unauthorized
  </description>
    </item>
    
    <item>
      <title>open source list</title>
      <link>https://llhhbc.github.io/wonder/post/source_list/</link>
      <pubDate>Thu, 26 Apr 2018 10:38:52 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/source_list/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Learn markdown</title>
      <link>https://llhhbc.github.io/wonder/post/learn-md/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/learn-md/</guid>
      <description>标题  利用=（最高阶标题） 和 - （第二阶标题） 在行首插入1到6个#，对应标题1到6阶  区块使用  在每行前面，或者段落最前面加上&amp;gt; 表示区块引用,如：   aa
 aa dsafas
  列表  用星号、加号或减号来表示无序列表 用数字加英文句点（不在乎数字是几）表示有序列表，数字会重新自动生成  代码区块  缩进4个空格或者一个制表符，就是代码区块 如果段内有一小段代码，可以用`号包起来，如  printf();   如果代码中也有`号，可以用多个来标记开始和结束如：  printf(&amp;quot;`&amp;quot;);   引用一段代码, 如：引用部分c++代码  int a=1; int b=2; int c= a+b;  分隔线  在一行中用3个以上的星号、减号、底线来建立一个分隔线  链接  链接文字用[方括号]来标记，后面紧接着用圆括号闰插入网上链接 如：test link 链接标记： 两个方括号 test link 前一个是链接文字，后一个是标记，然后在后面标记这个id  强调  使用星号、底线 作为标志强调字词的符号 （用一个*或_包围的字词会转成EM标签，用两个会转成strong this is em this is strong  图片  添加图片 !</description>
    </item>
    
    <item>
      <title>use hugo</title>
      <link>https://llhhbc.github.io/wonder/post/use-hugo/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:28 +0800</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/post/use-hugo/</guid>
      <description> hugo的安装 go get github.com/gohugoio/hugo  基本使用  创建一个网站项目 hugo new site hello 安装一个theme hugo将数据和展示分开了，显示部分由theme来管理 原理如下：  项目下的数据，会由hugo按格式读取，并约定好模板中的变更名，由theme来显示出来 比如：.Data表示content下的页面信息 theme就是go用来渲染的模板，而项目下content下的就是它的数据来源（默认用这个目录），也支持用其它目录   发布github  github上新创建一个repository 修改本地baseurl为github的：https://llhhbc.github.io/wonder/ 上传代码：  hugo ##生成静态文件 cd public git init git add . git commit -m &amp;quot;init&amp;quot; git remote add github https://github.com/llhhbc/wonder.git git push github master   在repository 的设置（setting）中，找到github pages 在source中选择分支，点击save（会自动刷新，然后会提示访问地址）  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://llhhbc.github.io/wonder/about/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://llhhbc.github.io/wonder/about/</guid>
      <description>My Wonder of light blogs</description>
    </item>
    
  </channel>
</rss>