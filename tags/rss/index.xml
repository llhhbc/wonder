<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rss on miracle of light</title>
    <link>http://wonder.zxcsoft.com/tags/rss/</link>
    <description>Recent content in Rss on miracle of light</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 04 Aug 2018 20:01:00 +0800</lastBuildDate>
    
	<atom:link href="http://wonder.zxcsoft.com/tags/rss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rss tools</title>
      <link>http://wonder.zxcsoft.com/post/tools/rss_tools/</link>
      <pubDate>Sat, 04 Aug 2018 20:01:00 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/tools/rss_tools/</guid>
      <description>rss 开源服务搭建，基于kuber+coredns+traefik 1.下载镜像 docker pull miniflux/miniflux:2.0.10 docker pull postgres:11-alpine  2.部署pg 1. 创建本地存储 apiVersion: v1 kind: PersistentVolume metadata: name: local-pv-1 labels: type: local spec: capacity: storage: 10Gi accessModes: - ReadWriteOnce hostPath: path: /data/pv/1  2. 创建存储使用申明  pvc到pv的绑定是，自动完成的，并且绑定后就是一对一的绑定，不会再改变。绑定考虑的是空间大小，如果没有合适的，会挂起，直到有合适的存储。kubectl get pvc 能看到具体的绑定情况 pvc的大小可以比pv小，用来实现存储大小的控制  apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pg-pv-claim labels: app: postgres spec: accessModes: - ReadWriteOnce resources: requests: storage: 10Gi  3. 创建应用 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: pg-11 spec: replicas: 1 template: metadata: labels: app: pg-11 spec: containers: - name: pg image: postgres:11-alpine imagePullPolicy: IfNotPresent ports: - containerPort: 5432 env: - name: POSTGRES_PASSWORD value: wonder # 虽然pgdata目录没变，但要设置，目的是为了触发initdb调用 name: PGDATA value: /var/lib/postgresql/data/pgdata volumeMounts: - name: pg-pv-storage mountPath: /var/lib/postgresql/data/pgdata volumes: - name: pg-pv-storage persistentVolumeClaim: claimName: pg-pv-claim  4.</description>
    </item>
    
  </channel>
</rss>