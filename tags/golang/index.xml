<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on miracle of light</title>
    <link>http://wonder.zxcsoft.com/tags/golang/</link>
    <description>Recent content in Golang on miracle of light</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 26 Aug 2018 20:02:28 +0800</lastBuildDate>
    
	<atom:link href="http://wonder.zxcsoft.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go源码学习</title>
      <link>http://wonder.zxcsoft.com/post/language/go/go-src/</link>
      <pubDate>Sun, 26 Aug 2018 20:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/language/go/go-src/</guid>
      <description>启动过程  初始化参数 设置argc，argv 初始化系统 设置maxproc 初始化调度器
 初始化栈分配器stack 初始化内存分配器malloc 公共初始化
 处理命令行参数、环境变量：gorags，goenvs
 垃圾回收初始化gcinit
  runtime.main
 初始化runtime包中的所有init函数 启动垃圾回收 执行所有用户包中的init 进入main.main，用户逻辑入口   内存分配  go内存空间结构
 页所属 spans 512MB | gc标记位图 bitmap 32GB | 用户内存分配 arena 512GB （后面的空间为可能的最大空间）  分配器将内存为两种：span内存块，object内存对象
 使用tcmalloc来管理内存
 cache 每个线程都会绑定一个cache，用于无锁object分配 central 为所有cache提供切分好的后备span heap 管理闲置的span，需要时向系统申请新内存
 优先使用cache来分配对象，如果不足，再从central中优先找现有的span检查是否有可用空间，再不足，才到heap中申请span
  内存分配
 golang编译器支持逃逸分析(escape analysis)，编译期通过构建调用图来分析局部变量是否会被外部引用，从而决定是否可直接分配在栈上 编译参数 -gcflags &amp;ldquo;-m&amp;rdquo; 可输出编译优化信息  内存回收
 以span为单元，检查span内的object是否全部释放，将原本就为空的span转移到central.nonempty，将收回的span交还给heap。同时会尝试合并相邻的空的span  内存释放</description>
    </item>
    
    <item>
      <title>prometheus源码分析</title>
      <link>http://wonder.zxcsoft.com/post/prometheus/prometheus-src/</link>
      <pubDate>Thu, 26 Jul 2018 19:01:00 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/prometheus/prometheus-src/</guid>
      <description>待完善&amp;hellip;</description>
    </item>
    
    <item>
      <title>goadesign 学习之adder</title>
      <link>http://wonder.zxcsoft.com/post/goa/goa_use/</link>
      <pubDate>Sun, 22 Jul 2018 20:01:00 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/goa/goa_use/</guid>
      <description>goadesign 学习  一次接触中，了解到了goa，根据dsl做巧妙的翻译，自动完成统一代码的生成
 github上搜索goadesign，可以看到他有的代码库，出于学习，我把它的样例库下载下来了，我决定从样例代码开始，结合官方的文档来学习
先从第一个例子开始  第一个是加法服务，adder目录只有两个go文件，其中一个还在报错（其实是程序自动生成的文件，只是里面有自己定制的代码，所以保留了  // adder/design/design.go var _ = API(&amp;quot;adder&amp;quot;, func() { //api定义说明，一个文件只可以有一个api Title(&amp;quot;The adder API&amp;quot;) Description(&amp;quot;A teaser for goa&amp;quot;) Host(&amp;quot;localhost:8080&amp;quot;) Scheme(&amp;quot;http&amp;quot;) }) var _ = Resource(&amp;quot;operands&amp;quot;, func() { //资源说明，resource对应一个service Action(&amp;quot;add&amp;quot;, func() { //动作说明，api请求动作 Routing(GET(&amp;quot;add/:left/:right&amp;quot;)) //定义访问地址格式 Description(&amp;quot;add returns the sum of the left and right parameters in the response body&amp;quot;) Params(func() { //定义请求url中参数说明 Param(&amp;quot;left&amp;quot;, Integer, &amp;quot;Left operand&amp;quot;) Param(&amp;quot;right&amp;quot;, Integer, &amp;quot;Right operand&amp;quot;) }) Response(OK, &amp;quot;text/plain&amp;quot;) //定义应答报文样式 }) })   根据design文件生成代码  goagen bootstrap -d github.</description>
    </item>
    
    <item>
      <title>goadesign 学习之dsl</title>
      <link>http://wonder.zxcsoft.com/post/goa/goa_dsl/</link>
      <pubDate>Sun, 22 Jul 2018 20:01:00 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/goa/goa_dsl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang 总结</title>
      <link>http://wonder.zxcsoft.com/post/language/go/quest/</link>
      <pubDate>Wed, 18 Jul 2018 20:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/language/go/quest/</guid>
      <description> Ready go 1. goroutine  goroutine 对应的用户态线程，而不是系统线程，调度是由golang自己来调度的 golang采用的是一种多对多的方案，m个用户线程对应n个系统线程 golang有3个角色：  M：代表系统线程，由操作系统管理 G：goroutine的实体，包括的调用栈，重要的调度信息 P：衔接M和G的调度上下文，由GOMAXPROCS决定，一般和核心数对应。每个P会将goroutine从一个就绪的队列中做pop操作，为了减小锁的竞争，通常情况下每个P会负责一个队列   </description>
    </item>
    
    <item>
      <title>gorm源码分析</title>
      <link>http://wonder.zxcsoft.com/post/gorm/gorm-src/</link>
      <pubDate>Wed, 27 Jun 2018 20:01:00 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/gorm/gorm-src/</guid>
      <description>总体分析  使用gorm的过程中，觉得它写的有意思，想了解下它的实现原理，所以就分析下源代码
 源码分析  由于这个是个库，并没有执行程序，看到目录下有main.go，所以就从这个开始
 1. main  定义了DB结构：
 Value //是接口类型，可放任何数据 Error //是记录错误 RowsAffected //记录生效行数 //单个db私有属性 db //定义的公共接口（Exec，Prepare，Query，QueryRow） //暂时不明白为什么选这4个，从open中可看出，go标准库中的sql.DB是实现了这个接口的 blockGlobalUpdate //记录全局更新标志 //从BlockGlobalUpdate函数中可看出，这个标志为true时，update或者delete没有where时，会报错 logMode //日志开关 2打开，1关闭 logger //自定义日志接口(print) search //search结构指针（用来拼接sql语句的） values //map[string]interface{} 可保存任何东西的map，暂时不知道要保存什么 //全局db属性 parent //父DB对象 callbacks //回调结构指针（记录了creates,updates,deletes,queries,rowQueries,processors类型的回调函数切片） dialet //sql格式化接口（针对不同的数据库定制化的差异） singularTable //bool类型，暂时不知道干什么的   open函数，调用go标准库打开数据库连接，设置默认日志，默认回调函数，并根据数据库连接类型，设置sql格式对象，并调用ping测试连接
后面就是一些DB的常规set和get方法，还有就是拼接sql的方法 * 通过set函数，可以看到，values里面保存的单个db中的修改化配置，clone的时候会复制过去，不是共用
main 大致过了一遍，对整个有点了解，再回看目录下的文件：
1. association 处理表关系的，针对外键 2. callback 开头的文件，处理回调函数的（等会重点看的） 3. dialect 开头的文件，处理各种数据库之前语法差异的 4. errors 定义了错误管理，所有的错误都在切片中 5. interface 定义了公共类的接口 6. join_table_handler 定义了n*n的表的关系接口 7.</description>
    </item>
    
    <item>
      <title>golang pprof使用</title>
      <link>http://wonder.zxcsoft.com/post/language/go/pprof/</link>
      <pubDate>Mon, 28 May 2018 20:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/language/go/pprof/</guid>
      <description>启用pprof  带有http的服务，只需要引入 import _ &amp;quot;net/http/pprof&amp;quot; 就可以通过访问http://ip:port/debug/pprof 查看了
 没有http服务的应用，或者不想在原端口启用的，可像我这样实现根据配置启用（config是我自定义的配置包）
  import ( _ &amp;quot;net/http/pprof&amp;quot; &amp;quot;net/http&amp;quot; ) func InitModel() { var ppaddr string if config.HasModuleInit() { ppaddr = config.StringDefault(&amp;quot;ppaddr&amp;quot;, &amp;quot;&amp;quot;) if ppaddr != &amp;quot;&amp;quot; { go http.ListenAndServe(ppaddr, nil) } } }  pprof使用 1.代码优化 curl http://ip:port/debug/pprof/profile &amp;gt; /tmp/a.profile go tool pprof 可执行程序 /tmp/a.profile (pprof) top #可查看占用资源最多的函数  pprof各字段的含义依次是：  采样点执行时间 采样点落在该函数中的百分比 上一项的累积百分比 采样点落在该函数，以及被它调用的函数执行的总时间 采样点落在该函数，以及被它调用的函数中的百分比 函数名 文件名  pprof分析  / 访问根目录，里面有几个链接：</description>
    </item>
    
    <item>
      <title>grafana源码学习</title>
      <link>http://wonder.zxcsoft.com/post/grafana/grafana-src/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/grafana/grafana-src/</guid>
      <description>grafana学习 1.整体流程了解 grafana-server(从main开始)  根据profile标志判断是否开启pprof 初始化版本、时间缀信息 初始化metrics包的版本信息
 在prometheus 中记录版本值1  创建grafanaServer
 init加载的清单
 api  通过registry.RegisterService注册http服务：HTTPServer  log  创建根root日志对象  login  在bus上注册句柄：&amp;rdquo;auth&amp;rdquo;, UpsertUser 扩展用户管理  setting
 记录系统标志（是否是windows）  extensions
 errors 引入github.com/pkg/errors包，在出错时，会记录栈信息，还有详细的函数信息  metrics
 初始化prometheus统计变量  plugins
 通过registry.RegisterService注册插件管理器：PluginManager  type Service interface { Init() error }  所有的插件都实现这个接口 在bus上注册句柄：&amp;rdquo;plugins&amp;rdquo;：ImportDashboard 在bus上注册事件监听：handlePluginStateChanged  services/alerting
 在bus上注册句柄：&amp;rdquo;alerting&amp;rdquo;, updateDashboardAlerts 在bus上注册句柄：&amp;rdquo;alerting&amp;rdquo;, validateDashboardAlerts 通过registry.RegisterService注册告警服务：AlertingService 在bus上注册句柄：&amp;rdquo;alerting&amp;rdquo;, handleNotificationTestCommand 在bus上注册句柄：&amp;rdquo;alerting&amp;rdquo;, handleAlertTestCommand  services/cleanup</description>
    </item>
    
    <item>
      <title>use hugo</title>
      <link>http://wonder.zxcsoft.com/post/hugo/use-hugo/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/hugo/use-hugo/</guid>
      <description> hugo的安装 go get github.com/gohugoio/hugo  基本使用  创建一个网站项目 hugo new site hello 安装一个theme hugo将数据和展示分开了，显示部分由theme来管理 原理如下：  项目下的数据，会由hugo按格式读取，并约定好模板中的变更名，由theme来显示出来 比如：.Data表示content下的页面信息 theme就是go用来渲染的模板，而项目下content下的就是它的数据来源（默认用这个目录），也支持用其它目录   发布github  github上新创建一个repository 修改本地baseurl为github的：https://llhhbc.github.io/wonder/ 上传代码：  hugo ##生成静态文件 cd public git init git add . git commit -m &amp;quot;init&amp;quot; git remote add github https://github.com/llhhbc/wonder.git git push github master   在repository 的设置（setting）中，找到github pages 在source中选择分支，点击save（会自动刷新，然后会提示访问地址）  </description>
    </item>
    
    <item>
      <title>use hugo</title>
      <link>http://wonder.zxcsoft.com/post/use-hugo/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:28 +0800</pubDate>
      
      <guid>http://wonder.zxcsoft.com/post/use-hugo/</guid>
      <description> hugo的安装 go get github.com/gohugoio/hugo  基本使用  创建一个网站项目 hugo new site hello 安装一个theme hugo将数据和展示分开了，显示部分由theme来管理 原理如下：  项目下的数据，会由hugo按格式读取，并约定好模板中的变更名，由theme来显示出来 比如：.Data表示content下的页面信息 theme就是go用来渲染的模板，而项目下content下的就是它的数据来源（默认用这个目录），也支持用其它目录   发布github  github上新创建一个repository 修改本地baseurl为github的：https://llhhbc.github.io/wonder/ 上传代码：  hugo ##生成静态文件 cd public git init git add . git commit -m &amp;quot;init&amp;quot; git remote add github https://github.com/llhhbc/wonder.git git push github master   在repository 的设置（setting）中，找到github pages 在source中选择分支，点击save（会自动刷新，然后会提示访问地址）  </description>
    </item>
    
  </channel>
</rss>